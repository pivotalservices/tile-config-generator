package fancyparser

import (
	"io/ioutil"
	"path/filepath"

	"github.com/ghodss/yaml"
)

// TileConfig represents all the things generated by the tile-config-generator
type TileConfig struct {
	FeaturesOpsFiles map[string]OpsFile
	NetworkOpsFiles  map[string]OpsFile
	OptionalOpsFiles map[string]OpsFile
	ResourceOpsFiles map[string]OpsFile

	ErrandVars         map[string]interface{}
	ProductDefaultVars map[string]interface{}
	ResourceVars       map[string]interface{}

	ProductConfig ProductConfig
}

// ProductConfig represents the product.yml file generated by the tile-config-generator
type ProductConfig struct {
	ProductName       string      `json:"product-name"`
	NetworkProperties interface{} `json:"network-properties"`
	ProductProperties interface{} `json:"product-properties"`
	ResourceConfig    interface{} `json:"resource-config"`
}

type TileConfigBytes struct {
	FeaturesOpsFiles map[string][]byte
	NetworkOpsFiles  map[string][]byte
	OptionalOpsFiles map[string][]byte
	ResourceOpsFiles map[string][]byte

	ErrandVars         []byte
	ProductDefaultVars []byte
	ResourceVars       []byte

	Product []byte

	Metadata []byte
}

// TODO: test!!!
func GetTileConfig(tileDir string) (TileConfig, error) {
	tileConfigBytes, err := GetTileConfigBytes(tileDir)
	if err != nil {
		return TileConfig{}, err
	}

	tileConfig := TileConfig{}
	featuresOps, err := GetOpsFileMapFromDirBytes(tileConfigBytes.FeaturesOpsFiles)
	if err != nil {
		return TileConfig{}, err
	}
	tileConfig.FeaturesOpsFiles = featuresOps

	networkOps, err := GetOpsFileMapFromDirBytes(tileConfigBytes.NetworkOpsFiles)
	if err != nil {
		return TileConfig{}, err
	}
	tileConfig.NetworkOpsFiles = networkOps

	optionalOps, err := GetOpsFileMapFromDirBytes(tileConfigBytes.OptionalOpsFiles)
	if err != nil {
		return TileConfig{}, err
	}
	tileConfig.OptionalOpsFiles = optionalOps

	resourceOps, err := GetOpsFileMapFromDirBytes(tileConfigBytes.ResourceOpsFiles)
	if err != nil {
		return TileConfig{}, err
	}
	tileConfig.ResourceOpsFiles = resourceOps

	tileConfig.ErrandVars = make(map[string]interface{})
	err = yaml.Unmarshal(tileConfigBytes.ErrandVars, &tileConfig.ErrandVars)
	if err != nil {
		return TileConfig{}, err
	}

	tileConfig.ProductDefaultVars = make(map[string]interface{})
	err = yaml.Unmarshal(tileConfigBytes.ProductDefaultVars, &tileConfig.ProductDefaultVars)
	if err != nil {
		return TileConfig{}, err
	}

	tileConfig.ResourceVars = make(map[string]interface{})
	err = yaml.Unmarshal(tileConfigBytes.ResourceVars, &tileConfig.ResourceVars)
	if err != nil {
		return TileConfig{}, err
	}

	err = yaml.Unmarshal(tileConfigBytes.Product, &tileConfig.ProductConfig)
	if err != nil {
		return TileConfig{}, err
	}

	return tileConfig, nil
}

// TODO: test!!!
func GetTileConfigBytes(tileDir string) (TileConfigBytes, error) {
	t := TileConfigBytes{}
	featuresOps, err := ExtractYAMLBytesInDir(filepath.Join(tileDir, "features"))
	if err != nil {
		return TileConfigBytes{}, err
	}
	t.FeaturesOpsFiles = featuresOps

	networkOps, err := ExtractYAMLBytesInDir(filepath.Join(tileDir, "network"))
	if err != nil {
		return TileConfigBytes{}, err
	}
	t.NetworkOpsFiles = networkOps

	optionalOps, err := ExtractYAMLBytesInDir(filepath.Join(tileDir, "optional"))
	if err != nil {
		return TileConfigBytes{}, err
	}
	t.OptionalOpsFiles = optionalOps

	resourceOps, err := ExtractYAMLBytesInDir(filepath.Join(tileDir, "resource"))
	if err != nil {
		return TileConfigBytes{}, err
	}
	t.ResourceOpsFiles = resourceOps

	errandVars, err := ioutil.ReadFile(filepath.Join(tileDir, "errand-vars.yml"))
	if err != nil {
		return TileConfigBytes{}, err
	}
	t.ErrandVars = errandVars

	metadata, err := ioutil.ReadFile(filepath.Join(tileDir, "metadata.yml"))
	if err != nil {
		return TileConfigBytes{}, err
	}
	t.Metadata = metadata

	productDefaultVars, err := ioutil.ReadFile(filepath.Join(tileDir, "product-default-vars.yml"))
	if err != nil {
		return TileConfigBytes{}, err
	}
	t.ProductDefaultVars = productDefaultVars

	product, err := ioutil.ReadFile(filepath.Join(tileDir, "product.yml"))
	if err != nil {
		return TileConfigBytes{}, err
	}
	t.Product = product

	resourceVars, err := ioutil.ReadFile(filepath.Join(tileDir, "resource-vars.yml"))
	if err != nil {
		return TileConfigBytes{}, err
	}

	t.ResourceVars = resourceVars
	return t, nil
}
